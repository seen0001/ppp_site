---
import "../styles/style.css";
import Navigation2 from "../components/Navigation2.astro";
import Footer from "../components/Footer.astro";
const { title } = Astro.props;
---

<html lang="en">
  <head>
    <!-- europæisk sprog -->
    <meta charset="utf-8" />

    <!-- Det eks hvis man bruger safari - så browser ser ens ud-->
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />

    <!-- Fortæller at det er et pesponsivt site -->
    <meta name="viewport" content="width=device-width" />

    <!-- SEO metadata -->
    <meta name="description" content="Portfolio" />
    <meta name="author" content="Sebastian Elias Engelbreth" />
    <meta name="copyright" content="Web by Sebastian Elias" />

    <!-- Den kommer ikke frem hos søgemaskiner -->
    <meta name="robots" content="noindex, nofollow" />

    <!-- fa-icon -->
    <link rel="icon" type="image/svg+xml" href="/iconer2/logo.svg" />

    <!-- Roboto font  -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Darker+Grotesque:wght@300..900&display=swap" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.0.0/fonts/remixicon.css" rel="stylesheet" />

    <!-- Sætter generator meta tag til at angive hvilken værktøj der blev brugt til at generere siden -->
    <meta name="generator" content={Astro.generator} />

    <!-- titel på siden (sidetitel) -->
    <title>{title}</title>
  </head>
  <body id="top">
    <div class="circle"></div>

    <Navigation2 />
    <div>
      <main>
        <slot />
      </main>
    </div>
    <Footer />
  </body>
  <style>
    main {
      padding-top: 0px;
      position: relative;
      margin-bottom: 500px;
      z-index: 1;
    }

    nav {
      position: fixed;
      top: 0;
      width: 100%;
      z-index: 10;
    }
    .circle {
      --circle-size: 35px;
      position: fixed;
      height: var(--circle-size);
      width: var(--circle-size);
      border: 2px solid var(--color_blue);
      border-radius: 50%;
      top: calc(var(--circle-size) / 2 * -1);
      left: calc(var(--circle-size) / 2 * -1);
      pointer-events: none;
      z-index: 1000;
    }
  </style>

  <script>
    const circleElement = document.querySelector(".circle");

    // Create objects to track mouse position and custom cursor position
    const mouse = { x: 0, y: 0 }; // Track current mouse position
    const previousMouse = { x: 0, y: 0 }; // Store the previous mouse position
    const circle = { x: 0, y: 0 }; // Track the circle position

    // Initialize variables to track scaling and rotation
    let currentScale = 0; // Track current scale value
    let currentAngle = 0; // Track current angle value

    // Update mouse position on the 'mousemove' event
    window.addEventListener("mousemove", (e) => {
      mouse.x = e.x;
      mouse.y = e.y;
    });

    // Smoothing factor for cursor movement speed (0 = smoother, 1 = instant)
    const speed = 0.3;

    // Start animation
    const tick = () => {
      // MOVE
      // Calculate circle movement based on mouse position and smoothing
      circle.x += (mouse.x - circle.x) * speed;
      circle.y += (mouse.y - circle.y) * speed;
      // Create a transformation string for cursor translation
      const translateTransform = `translate(${circle.x}px, ${circle.y}px)`;

      // SQUEEZE
      // 1. Calculate the change in mouse position (deltaMouse)
      const deltaMouseX = mouse.x - previousMouse.x;
      const deltaMouseY = mouse.y - previousMouse.y;
      // Update previous mouse position for the next frame
      previousMouse.x = mouse.x;
      previousMouse.y = mouse.y;
      // 2. Calculate mouse velocity using Pythagorean theorem and adjust speed
      const mouseVelocity = Math.min(Math.sqrt(deltaMouseX ** 2 + deltaMouseY ** 2) * 4, 150);
      // 3. Convert mouse velocity to a value in the range [0, 0.5]
      const scaleValue = (mouseVelocity / 150) * 0.5;
      // 4. Smoothly update the current scale
      currentScale += (scaleValue - currentScale) * speed;
      // 5. Create a transformation string for scaling
      const scaleTransform = `scale(${1 + currentScale}, ${1 - currentScale})`;

      // ROTATE
      // 1. Calculate the angle using the atan2 function
      const angle = (Math.atan2(deltaMouseY, deltaMouseX) * 180) / Math.PI;
      // 2. Check for a threshold to reduce shakiness at low mouse velocity
      if (mouseVelocity > 20) {
        currentAngle = angle;
      }
      // 3. Create a transformation string for rotation
      const rotateTransform = `rotate(${currentAngle}deg)`;

      // Apply all transformations to the circle element in a specific order: translate -> rotate -> scale
      circleElement.style.transform = `${translateTransform} ${rotateTransform} ${scaleTransform}`;

      // Request the next frame to continue the animation
      window.requestAnimationFrame(tick);
    };

    // Start the animation loop
    tick();
  </script>
</html>
