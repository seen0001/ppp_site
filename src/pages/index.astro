---
// index.astro
import "../styles/style.css";
import Preloader from "../components/Preloader.astro";
import MainLayout from "../layouts/MainLayout.astro";
import Button from "../components/Button.astro";
import TextKasse from "../components/TextKasse.astro";
---

<MainLayout title="Web by Sebastian Elias.">
  <Preloader />
  <main>
    <div class="scrollbar-container">
      <section class="parallax-background-section">
        <div class="parallax-background-element pbe-1">
          <article class="hero">
            <div class="spline_bg">
              <script type="module" src="https://unpkg.com/@splinetool/viewer@1.9.29/build/spline-viewer.js"></script>
              <spline-viewer url="https://prod.spline.design/xVSRqW6JGiwDBWAW/scene.splinecode"></spline-viewer>
            </div>
            <div class="hero_text">
              <h1>Helping brands to stand out in the digital era.</h1>
              <p>Together we build the blocks of your vision - no nonsense, just bold digital solutions that make your brand stand out.</p>
              <div>
                <Button style="primary" linket="/contact">Contact me</Button>
                <Button style="secondary" linket="/files/resume.pdf">Download CV</Button>
              </div>
            </div>
          </article>
        </div>
      </section>

      <TextKasse h2="Hey," image="/images/cv-photo.avif" image_alt="Billede af Sebastian Engelbreth">
        <div class="kasse-text">
          <h2>I'm <span class="input"></span></h2>
          <div class="kasse-text-p">
            <p>I am a 25-year-old passionate multimedia design student, based in Copenhagen, with a strong interest in code, digital design, and user experiences.</p>
            <p>
              <br />
              I am interested in jobs/internships where I can contribute solutions to tasks and challenges while also developing my professional skills and experience.
            </p>
          </div>
        </div>
      </TextKasse>
    </div>
    <div class="container">
      <h2 class="text">Frontend Code<span class="text-behind">HTML, CSS, JavaScript, Astro, React & Next.js</span></h2>
      <h2 class="text">UX/UI<span class="text-behind">Figma, Adobe CC & Spline</span></h2>
      <h2 class="text">Audio<span class="text-behind">Ableton</span></h2>
      <h2 class="text">Teamwork<span class="text-behind">GitHub, Trello, Scrum etc.</span></h2>
      <h2 class="text">Practical Tools<span class="text-behind">Microsoft 365 (Excel, Word, Powerpoint)</span></h2>
    </div>

    <!-- <span class="button-line"></span> -->
  </main>
</MainLayout>

<script>
  import Typed from "typed.js";

  const typed = new Typed(".input", {
    strings: ["Sebastian Engelbreth", "Web Developer", "UI/UX Designer"],
    typeSpeed: 70,
    backSpeed: 65,
    loop: true,
  });
</script>

<style>
  section.parallax-background-section {
    position: relative;
    height: 100vh;
    overflow: hidden;
  }
  .parallax-background-element {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-attachment: fixed;
  }

  .kasse-text h2 {
    font-size: 3rem;
  }

  .input {
    color: var(--color_blue);
  }
  .kasse-text-p {
    margin-top: 25px;
  }
  /* Preloader styles */
  #preloader {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.8); /* Baggrundsfarve */
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    transition: opacity 0.3s ease; /* Glidende overgang */
  }

  .hidden {
    opacity: 0;
    pointer-events: none; /* Forhindrer interaktion, når den er skjult */
  }

  .visible {
    opacity: 1; /* Gør preloaderen synlig */
  }

  .hero {
    height: 100vh;
    display: grid;
    grid-template-columns: repeat(8, 1fr);
    grid-template-rows: repeat(8, 1fr);
    grid-column-gap: 0px;
    grid-row-gap: 0px;
  }
  .hero_text {
    z-index: 1;
    grid-area: 3 / 2 / 5 / 5;
    font-family: var(--font_body);
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .hero_text h1 {
    line-height: 4.4rem;
  }
  p {
    font-size: var(--font_size_large);
  }

  .container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
    height: 100vh;
    margin-inline: 10%;
  }

  .text {
    font-family: var(--font_body);
    font-size: 4rem;
    letter-spacing: -0.01em;
    line-height: 100%;
    width: 100%;
    color: rgb(182, 182, 182, 0.2);
    background: linear-gradient(to right, var(--color_text), var(--color_text)) no-repeat;
    -webkit-background-clip: text;
    background-clip: text;
    background-size: 0%;
    transition: background-size cubic-bezier(0.1, 0.5, 0.5, 1) 0.5s;

    border-bottom: 1px solid #2f2b28;

    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: center;
    position: relative;
  }

  .text-behind {
    display: flex;
    text-align: center;
    position: absolute;
    width: 100%;
    height: 100%;
    background: var(--color_blue);
    color: var(--color_white);
    font-size: 2.25rem;

    clip-path: polygon(0 50%, 100% 50%, 100% 50%, 0 50%);
    transform-origin: center;
    transition: all cubic-bezier(0.1, 0.5, 0.5, 1) 0.4s;

    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .text:hover > span {
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
  }

  a {
    text-decoration: none;
    color: inherit;
  }

  .spline_bg {
    grid-area: 1 / 1 / 9 / 9;
    height: 100vh;
    left: 0;
    top: 0;
    width: auto;
  }
  .center-icons {
    display: flex;
    align-items: center;
  }
  .content-container {
    margin-top: 60px;
  }

  .sociale_links {
    display: flex;
    gap: 12px;
  }
  .sociale_links a {
    background-color: var(--bg_color);
    border-radius: 50px;
    width: 40px;
    height: auto;
    font-size: var(--font_size_medium);
  }
  .sociale_links a:hover {
    background-color: var(--color_blue);
  }

  .navigation {
    z-index: 1;
  }

  .about {
    height: 100vh;
    width: 100%;
    background: url();
    background-position: top;
    background-size: cover;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .about-content h4 {
    font-size: 1.6rem;
  }

  .about-content h1 {
    font-size: 4rem;
    font-weight: 900;
    margin: 20px 0px 20px;
    line-height: 1.2;
  }

  .about-content {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    grid-template-rows: repeat(5, 1fr);
    grid-column-gap: 0px;
    grid-row-gap: 0px;
  }

  .div1 {
    grid-area: 2 / 1 / 6 / 4;
  }
  .div2 {
    grid-area: 1 / 4 / 6 / 6;
  }

  h1 {
    font-size: 4cqw;
  }

  @media screen and (min-width: 768px) {
  }

  @media screen and (min-width: 1024px) {
  }

  @media screen and (min-width: 1440px) {
  }
</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import Lenis from "lenis";

  // Register ScrollTrigger plugin
  gsap.registerPlugin(ScrollTrigger);

  // Initialize a new Lenis instance for smooth scrolling
  const lenis = new Lenis();

  // Listen for the 'scroll' event and log the event data to the console
  lenis.on("scroll", (e) => {
    console.log(e);
  });

  // Synchronize Lenis scrolling with GSAP's ScrollTrigger plugin
  lenis.on("scroll", ScrollTrigger.update);

  // Add Lenis's requestAnimationFrame (raf) method to GSAP's ticker
  // This ensures Lenis's smooth scroll animation updates on each GSAP tick
  gsap.ticker.add((time) => {
    lenis.raf(time * 1000); // Convert time from seconds to milliseconds
  });

  // Disable lag smoothing in GSAP to prevent any delay in scroll animations
  gsap.ticker.lagSmoothing(0);

  // GSAP animations for text elements
  const textElements = gsap.utils.toArray(".text");
  textElements.forEach((text) => {
    gsap.to(text, {
      backgroundSize: "100%",
      ease: "none",
      scrollTrigger: {
        trigger: text,
        start: "center 90%",
        end: "center 50%",
        scrub: true,
      },
    });
  });

  // GSAP animations for section elements
  const sectionElements = gsap.utils.toArray(".tekst_indhold1, .tekst_indhold2");
  sectionElements.forEach((element) => {
    gsap.to(element, {
      opacity: 1,
      ease: "none",
      scrollTrigger: {
        trigger: element,
        start: "top 100%",
        end: "top 40%",
        scrub: 0.4,
      },
    });
  });

  // Parallax

  gsap.utils.toArray(".parallax-background-section").forEach((section: HTMLElement, i: number) => {
    // TypeScript: Ensure section.bg is properly typed and querySelector is handled safely
    const bg = section.querySelector(".parallax-background-element") as HTMLElement | null;

    if (bg) {
      // Indstil den indledende baggrundsposition
      bg.style.backgroundPosition = "50% 0px";

      gsap.to(bg, {
        backgroundPosition: `50% ${-innerHeight / 2}px`,
        ease: "none",
        scrollTrigger: {
          trigger: section,
          scrub: true,
          onUpdate: function (self) {
            gsap.set(bg, { top: self.scroll() - (bg.parentElement?.offsetTop || 0) });
          },
        },
      });
    } else {
      bg.style.backgroundPosition = "50% 0px";

      gsap.to(bg, {
        backgroundPosition: `50% ${-innerHeight / 2}px`,
        ease: "none",
        scrollTrigger: {
          trigger: section,
          start: "top top",
          end: "top 50%",
          scrub: true,
          onUpdate: function (self) {
            gsap.set(bg, { top: self.scroll() - (bg.parentElement?.offsetTop || 0) });
          },
        },
      });
    }
  });
</script>
