---
import "../styles/style.css";
---

<section class="works">
  <div class="container-works">
    <div class="content-works">
      <div id="gallery-work">
        <div id="work-images">
          <div class="work-image" style="
                  background-image: url('https://ester-profil.netlify.app/images/barselona.avif');
                "></div>
          <div class="work-image" style="
                  background-image: url('https://ester-profil.netlify.app/images/girl-talk.avif');
                "></div>
          <div class="work-image" style="
                  background-image: url('https://ester-profil.netlify.app/images/cph-light.avif');
                "></div>
          <div class="work-image" style="
                  background-image: url('/images/forest-flavours.avif');
                "></div>
          <div class="work-image" style="
                  background-image: url('/images/mette-mink.avif');
                "></div>
        </div>
      </div>

      <div class="items-works">
        <div class="grid-works">
          <div class="divider"></div>
          <div class="item-work">
            <div class="title">
              <h3>Barselona</h3>
              <p>My exam project involved creating a completely reimagined website for the band Barselona.</p>
            </div>
          </div>
          <div class="divider"></div>
          <div class="item-work">
            <div class="title">
              <h3>Girl Talk</h3>
              <p>A single-page site for Girl Talk, showcasing their parental counseling service.</p>
            </div>
          </div>
          <div class="divider"></div>
          <div class="item-work">
            <div class="title">
              <h3>CPH Light Festival</h3>
              <p>Redesigned the website for Copenhagen Light Festival with a fresh approach.</p>
            </div>
          </div>
          <div class="divider"></div>
          <div class="item-work">
            <div class="title">
              <h3>Vild Mad</h3>
              <p>A themed website for Supertusch, designed to educate 7th-grade students about foraging.</p>
            </div>
          </div>
          <div class="divider"></div>
          <div class="item-work">
            <div class="title">
              <h3>Mette's Mink Mission</h3>
              <p>An interactive animated game exclusively designed and programmed by me.</p>
            </div>
          </div>
          <div class="divider"></div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .works {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
    padding-bottom: 250px;
    position: relative;
  }

  .works .container-works {
    width: 1200px;
    max-width: 100%;
    padding: 0 15px;
    margin: auto;
  }

  .works .content-works {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
  }

  .works .header-works {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
    padding-bottom: 35px;
  }

  .works #gallery-work {
    position: fixed;
    width: 400px;
    height: 225px;
    transform: translateY(-50%, 50%);
    z-index: 999;
    overflow: hidden;
    pointer-events: none;
    transition: all cubic-bezier(0.19, 1, 0.22, 1) 1.5s;
  }

  .works #work-images {
    width: 100%;
    height: calc(225px * 5);
    display: flex;
    flex-direction: column;
    transition: all cubic-bezier(0.19, 1, 0.22, 1) 1.5s;
  }

  .works .work-image {
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
  }

  .works .grid-works {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
  }

  .works .grid-works .item-work {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
    padding: 40px 0;
    opacity: 0.6;
    -webkit-transition: 0.5s;
    transition: 0.5s;
    position: relative;
    z-index: 2;
  }

  .works .grid-works .item-work .title {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
  }

  .works .grid-works .item-work:hover {
    opacity: 1;
  }

  .works .grid-works .item-work h3 {
    font-size: 26px;
    line-height: 40px;
  }
  .divider {
    width: 100%;
    height: 1px;
    background: var(--color_text);
    margin: 0.2em 0;
  }
</style>

<script>
  import { gsap } from "gsap";
  const elementsWorks = document.querySelectorAll(".item-work");
  const slidePicWorks = document.querySelector("#gallery-work");
  const slidePicsWorks = document.querySelector("#work-images");

  gsap.set(slidePicWorks, { autoAlpha: 0 });

  elementsWorks.forEach((element, index) => {
    element.addEventListener("mouseenter", function () {
      gsap.to(slidePicsWorks, {
        marginTop: `-${225 * index}px`,
        duration: 0.2,
        ease: "power1",
      });
    });

    element.addEventListener("mouseleave", function () {
      gsap.to(element, { color: "initial", duration: 0.2, ease: "power1" });
    });
  });

  window.addEventListener("mousemove", function (e) {
    gsap.to(slidePicWorks, {
      top: `${e.clientY}px`,
      left: `${e.clientX}px`,
      xPercent: -20,
      yPercent: -45,
      duration: 0.2,
      ease: "power1",
    });
  });

  document.querySelector(".items-works").addEventListener("mouseenter", function () {
    gsap.to(slidePicWorks, {
      autoAlpha: 1,
      duration: 0.2,
      ease: "power1",
    });
  });

  document.querySelector(".items-works").addEventListener("mouseleave", function () {
    gsap.to(slidePicWorks, {
      autoAlpha: 0,
      duration: 0.2,
      ease: "power1",
    });
  });
  gsap.from(".divider", 3, {
    scaleX: 0, // Start med en skalering på 0
    ease: "power3.inOut", // Brug en easing funktion
    stagger: {
      amount: 1, // Stagger-effekt for hvert element
    },
    scrollTrigger: {
      trigger: ".divider", // Den klasse der udløser animationen
      start: "top 100%", // Animationen starter, når toppen af .divider når bunden af viewport
      toggleActions: "play none none reset", // Spil animationen ved indtræden og stop ved udtræden
    },
  });

  gsap.from(".item-work > .title", 2, {
    scrollTrigger: {
      trigger: ".item-work",
      start: "top 100%",
      toggleActions: "play none none reset", // Spil ved scrolling ned, reversér ved scrolling op
    },
    opacity: 0,
    y: 40,
    duration: 2,
    delay: 1.8,
    ease: "power3.inOut",
    stagger: {
      amount: 1.5,
    },
  });
</script>

<!-- <style>
  .cases-container {
    padding-top: 12%;
  }

  .cases-text {
    display: flex;
    flex-direction: column;
    text-align: center;
    margin-bottom: 80px;
    gap: 40px;
  }
  .cases-text p {
    font-size: 1.6rem;
  }

  .cases-text h1 {
    font-size: 4cqw;
  }
  .divider {
    width: 100%;
    height: 1px;
    margin: 0.2em 0;
    background: var(--color_white);
  }
  .flex-text {
    height: 80px;
    display: flex;
    justify-content: space-between;
    padding: 0 10%;
    align-items: center;
  }

  .flex-text p {
    max-width: 350px;
  }
  .menu {
  }

  .menu__item {
    width: 100%;
    display: flex;
    flex-direction: column;
  }

  .menu__item-image_wrapper {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 500px;
    height: 250px;
    pointer-events: none;
    opacity: 0;
  }

  .menu__item-image_inner .menu__item-image {
    left: 0;
    top: 0;
    height: 100%;
    width: 100%;
    object-fit: contain;
  }

  .menu__item-text {
    font-family: var(--font_header);
    font-weight: 700;
    text-transform: uppercase;
    font-size: 2.2rem;
    line-height: 1;
    opacity: 1;
    transition: opacity 350ms ease;
    white-space: nowrap;
    overflow: hidden;
    cursor: pointer;
  }

  .menu__item:hover .menu__item-text {
    color: var(--color_blue);
  }

  .menu__item:hover .menu__item-image_wrapper {
    z-index: -2;
  }

  .menu__item-innertext {
    text-align: center;
  }
</style>

<script>
  import { gsap } from "gsap";

  // Initial animations for menu text
  gsap
    .timeline()
    .set(".menu", { autoAlpha: 1 })
    .from(".menu__item-innertext", {
      delay: 1,
      duration: 0.85,
      xPercent: 25,
      yPercent: 125,
      stagger: 0.095,
      skewY: gsap.utils.wrap([-8, 8]),
      ease: "expo.out",
    })
    .set(".menu", { pointerEvents: "all" });

  // Divider animation - juster transformOrigin
  gsap.from(".divider", 3, {
    scaleX: 0,
    ease: "power3.inOut",
    delay: 0,
    stagger: {
      amount: 1,
    },
  });

  // Text (column) animation
  gsap.from(".flex-text", 2, {
    opacity: 0,
    y: 40,
    ease: "power3.inOut",
    delay: 2,
    stagger: {
      amount: 1.5,
    },
  });

  // Image hover animations
  const menuItems = document.querySelectorAll(".menu__item");

  menuItems.forEach((item) => {
    const imageWrapper = item.querySelector(".menu__item-image_wrapper");
    const imageWrapperBounds = imageWrapper.getBoundingClientRect();
    let itemBounds = item.getBoundingClientRect();

    const onMouseEnter = () => {
      gsap.set(imageWrapper, {
        scale: 0.8,
        xPercent: -50,
        yPercent: 70,
        rotation: -15,
      });
      gsap.to(imageWrapper, { opacity: 1, scale: 1, yPercent: 0, rotation: 0 });
    };

    const onMouseLeave = () => {
      gsap.to(imageWrapper, {
        opacity: 0,
        yPercent: -70,
        xPercent: -50,
        scale: 0.8,
        rotation: -15,
      });
    };

    const onMouseMove = ({ x, y }) => {
      let yOffset = itemBounds.top / imageWrapperBounds.height;
      yOffset = gsap.utils.mapRange(0, 1.5, -50, 50, yOffset);
      gsap.to(imageWrapper, {
        duration: 1.25,
        x: Math.abs(x - itemBounds.left) - imageWrapperBounds.width / 1.4,
        y: Math.abs(y - itemBounds.top) - imageWrapperBounds.height / 5 - yOffset,
      });
    };

    item.addEventListener("mouseenter", onMouseEnter);
    item.addEventListener("mouseleave", onMouseLeave);
    item.addEventListener("mousemove", onMouseMove);

    window.addEventListener("resize", () => {
      itemBounds = item.getBoundingClientRect();
    });
  });
</script> -->
